conport_memory_strategy:
  # This workspace_id is CRITICAL. The agent must determine this at the start.
  # It can be from an environment variable like ${workspaceFolder} if available from the client,
  # or the agent MUST ask the user for the absolute path to the current project workspace.
  workspace_id_source: "The agent must obtain the absolute path to the current workspace to use as `workspace_id` for all ConPort tool calls. This might be available as `${workspaceFolder}` or require asking the user."

  initialization: |
    <thinking>
    - **CONPORT INITIALIZATION AND CONTEXT LOADING:**
    - First, I need to ensure I have the `workspace_id`. I will check if it's available (e.g., as `${workspaceFolder}`). If not, I MUST ask the user for the absolute path to the current workspace.
    - Once `workspace_id` is confirmed, I will attempt to connect to the `conport` server (referred to as ConPort) and load initial context.
    - I will call the 'get_*' tools sequentially. If any critical 'get_*' tool call fails (e.g., server not found, or a specific error indicating the workspace is not initialized in ConPort), I will set status to [CONPORT_MEMORY: INACTIVE] and inform the user.
    - Otherwise, upon successful loading of initial contexts, I will set status to [CONPORT_MEMORY: ACTIVE].
    - Tool usage descriptions below are illustrative; the agent must construct actual `use_mcp_tool` calls with the correct XML structure and the determined `ACTUAL_WORKSPACE_ID`.
    </thinking>
    # Agent Action Plan:
    # 1. Determine `ACTUAL_WORKSPACE_ID`.
    # 2. Invoke ConPort tool `get_product_context` using `use_mcp_tool` with server `conport` and arguments `{"workspace_id": "ACTUAL_WORKSPACE_ID"}`. Internalize the retrieved data for contextual understanding. Briefly confirm successful loading (e.g., 'Product context loaded.') and proceed to the next step. Do not echo the full raw data to the user unless specifically requested.
    # 3. Invoke ConPort tool `get_active_context` using `use_mcp_tool` with server `conport` and arguments `{"workspace_id": "ACTUAL_WORKSPACE_ID"}`. Internalize the retrieved data for contextual understanding. Briefly confirm successful loading and proceed. Do not echo full raw data.
    # 4. Invoke ConPort tool `get_decisions` using `use_mcp_tool` with server `conport` and arguments `{"workspace_id": "ACTUAL_WORKSPACE_ID", "limit": 5}`. Internalize the retrieved data. Briefly confirm successful loading and proceed. Do not echo full raw data.
    # 5. Invoke ConPort tool `get_progress` using `use_mcp_tool` with server `conport` and arguments `{"workspace_id": "ACTUAL_WORKSPACE_ID", "limit": 5}`. Internalize the retrieved data. Briefly confirm successful loading and proceed. Do not echo full raw data.
    # 6. Invoke ConPort tool `get_system_patterns` using `use_mcp_tool` with server `conport` and arguments `{"workspace_id": "ACTUAL_WORKSPACE_ID"}`. Internalize the retrieved data. Briefly confirm successful loading and proceed. Do not echo full raw data.
    # 7. Invoke ConPort tool `get_custom_data` using `use_mcp_tool` with server `conport` and arguments `{"workspace_id": "ACTUAL_WORKSPACE_ID", "category": "critical_settings"}`. Internalize the retrieved data. Briefly confirm successful loading and proceed. Do not echo full raw data.
    # 8. Invoke ConPort tool `get_custom_data` using `use_mcp_tool` with server `conport` and arguments `{"workspace_id": "ACTUAL_WORKSPACE_ID", "category": "ProjectGlossary"}`. Internalize all retrieved glossary terms and definitions. Briefly confirm successful loading and proceed. Do not echo full raw data.
    # 9. If all initial `get_*` calls are successful and return expected data structures (even if empty), set internal status to [CONPORT_MEMORY: ACTIVE] and inform user: "ConPort memory initialized and all contexts loaded. How can I assist you?" (The agent should then use the ask_followup_question tool).

  if_conport_unavailable_or_init_failed: |
    <thinking>
    - Initial ConPort tool calls failed (e.g., server not found, tool execution error, unexpected response format) or the server seems unavailable for this workspace.
    - I will inform the user that ConPort could not be initialized for context management.
    - I will set my status to [CONPORT_MEMORY: INACTIVE].
    - I will proceed with the user's task using only the information directly available in the chat or from other tools, or ask clarifying questions if essential context is missing.
    </thinking>
    # Agent Action: Inform user: "Could not initialize or load context from ConPort for this workspace. Proceeding without ConPort-managed memory. Memory Bank status is [CONPORT_MEMORY: INACTIVE]."

  general:
    status_prefix: "Begin EVERY response with either '[CONPORT_MEMORY: ACTIVE]' or '[CONPORT_MEMORY: INACTIVE]'."

  conport_updates:
    frequency: "UPDATE CONPORT THROUGHOUT THE CHAT SESSION, WHEN SIGNIFICANT CHANGES OCCUR IN THE PROJECT, OR WHEN EXPLICITLY REQUESTED BY THE USER."
    workspace_id_note: "All ConPort tool calls require the `workspace_id`."

    log_decision:
      trigger: "When a significant architectural or implementation decision is made and confirmed by the user."
      action_description: |
        <thinking>
        - A decision needs to be logged to ConPort.
        - Required arguments for 'log_decision': `workspace_id`, `summary`. Optional: `rationale`, `implementation_details`.
        - I will construct the arguments as a JSON object.
        </thinking>
        # Agent Action: Invoke ConPort tool `log_decision` using `use_mcp_tool` with server `conport`.
        # Arguments example: `{"workspace_id": "ACTUAL_WORKSPACE_ID", "summary": "Decision summary", "rationale": "Rationale details", "implementation_details": "Implementation notes"}`.

    update_product_context:
      trigger: "When the high-level project description, goals, features, or overall architecture changes significantly, as confirmed by the user."
      action_description: |
        <thinking>
        - Product context needs updating in ConPort.
        - Step 1: Fetch the current product context using 'get_product_context'. The result is a JSON string in the 'text' field of the TextContent; parse this JSON.
        - Step 2: Prepare the *complete new JSON object* for the product context. The internal structure (e.g., keys like "projectGoal", "keyFeatures") is flexible and should be maintained consistently or updated thoughtfully with user confirmation.
        - Step 3: Use the 'update_product_context' tool with the new complete `content` object.
        </thinking>
        # Agent Action Plan:
        # 1. Invoke ConPort tool `get_product_context` (`{"workspace_id": "..."}`). Parse JSON from result.
        # 2. Construct the new, complete JSON object for product context.
        # 3. Invoke ConPort tool `update_product_context` (`{"workspace_id": "...", "content": NEW_JSON_OBJECT}`).

    update_active_context:
      trigger: "When the current focus of work changes, significant progress is made, or new open questions/issues arise, as confirmed by the user."
      action_description: |
        <thinking>
        - Active context needs updating in ConPort.
        - Step 1: Fetch current active context using 'get_active_context'. Parse JSON from result.
        - Step 2: Prepare the *complete new JSON object* for active context (e.g., with "currentFocus", "recentChanges", "openQuestionsIssues").
        - Step 3: Use 'update_active_context' tool.
        </thinking>
        # Agent Action Plan:
        # 1. Invoke ConPort tool `get_active_context` (`{"workspace_id": "..."}`). Parse JSON.
        # 2. Construct the new, complete JSON object for active context.
        # 3. Invoke ConPort tool `update_active_context` (`{"workspace_id": "...", "content": NEW_JSON_OBJECT}`).

    log_progress:
      trigger: "When a task begins, its status changes (e.g., to IN_PROGRESS, DONE), or it's completed."
      action_description: |
        <thinking>
        - Progress needs to be logged to ConPort.
        - Required for 'log_progress': `workspace_id`, `status`, `description`. Optional: `parent_id`.
        </thinking>
        # Agent Action: Invoke ConPort tool `log_progress` with arguments like `{"workspace_id": "...", "status": "IN_PROGRESS", "description": "...", "parent_id": null}`.

    log_system_pattern:
      trigger: "When new architectural, coding, or testing patterns are introduced or existing ones are significantly modified."
      action_description: |
        <thinking>
        - A system pattern needs to be logged/updated in ConPort.
        - Required for 'log_system_pattern': `workspace_id`, `name`. Optional: `description`.
        </thinking>
        # Agent Action: Invoke ConPort tool `log_system_pattern` with arguments like `{"workspace_id": "...", "name": "Pattern Name", "description": "Pattern description..."}`.

    manage_custom_context:
      trigger: "When project-specific information is identified that doesn't fit standard categories, or when such custom data needs to be retrieved or deleted."
      guidelines: |
        <thinking>
        - Custom context in ConPort uses `category`, `key`, and `value` (JSON-serializable).
        - For new custom context: Propose `category` and `key` to the user. The `value` can be any JSON data. Use 'log_custom_data'.
        - To retrieve: Use 'get_custom_data' with `category` and/or `key`.
        - To delete: Use 'delete_custom_data' with `category` and `key`.
        - Consider maintaining a list of active custom categories for this project by logging this list itself using `log_custom_data` (e.g., category: "conport_meta", key: "custom_categories_list", value: ["api_endpoints", "team_roles"]).
        </thinking>
      log_action_description: "Agent Action: Invoke ConPort tool `log_custom_data` with `{\"workspace_id\": \"...\", \"category\": \"...\", \"key\": \"...\", \"value\": JSON_VALUE}`."
      get_action_description: "Agent Action: Invoke ConPort tool `get_custom_data` with `{\"workspace_id\": \"...\", \"category\": \"...\" (optional), \"key\": \"...\" (optional)}`."
      delete_action_description: "Agent Action: Invoke ConPort tool `delete_custom_data` with `{\"workspace_id\": \"...\", \"category\": \"...\", \"key\": \"...\"}`."

    reconfigure_core_guidance:
      product_active_context: "The internal JSON structure of 'Product Context' and 'Active Context' (the `content` field) is flexible. Work with the user to define/evolve this structure via `update_product_context` and `update_active_context`. The server stores this `content` as a JSON blob."
      decisions_progress_patterns: "The fundamental fields for Decisions, Progress, and System Patterns are fixed by ConPort's tools. For significantly different structures or additional fields, guide the user to create a new custom context category using `log_custom_data` (e.g., category: 'project_milestones_detailed')."

  umb_update_conport:
    trigger: "^(Update ConPort|UC|Update Memory Bank|UMB)$"
    user_acknowledgement_text: "[CONPORT_MEMORY: UPDATING]"
    instructions:
      - "Halt Current Task: Stop current activity."
      - "Acknowledge Command: Send `[CONPORT_MEMORY: UPDATING]` to the user."
      - "Review Chat History: Analyze the complete current chat session for new information, decisions, progress, context changes, and clarifications."
    core_update_process: |
      <thinking>
      - Synchronize ConPort with information from the current chat session.
      - Use appropriate ConPort tools.
      - For `update_product_context` and `update_active_context`, first fetch current content, then merge/update, then call the update tool with the *complete new content object*.
      - All tool calls require the `workspace_id`.
      </thinking>
      # Agent Action Plan (Illustrative - perform as needed based on chat review):
      # 1. Log new decisions: Use `log_decision`.
      # 2. Log task progress: Use `log_progress`.
      # 3. Log new system patterns: Use `log_system_pattern`.
      # 4. Update Active Context: Invoke `get_active_context`, merge changes, invoke `update_active_context`.
      # 5. Update Product Context (if significant changes): Invoke `get_product_context`, merge changes, invoke `update_product_context`.
      # 6. Log new custom context: Use `log_custom_data`.
      # 7. After updates, re-fetch key contexts if necessary to refresh internal understanding (e.g., `get_active_context`).
    post_umb_actions:
      - "Inform user: ConPort has been synchronized with information from the current session."
      - "Resume previous task or await new instructions."
    # These overrides might not be strictly necessary if all memory operations are via ConPort tools,
    # but keeping them doesn't hurt if UMB needs to, for example, list files to identify a new custom context category.
    override_file_restrictions: true
    override_mode_restrictions: true